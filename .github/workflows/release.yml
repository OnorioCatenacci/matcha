name: Release New Version

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: Release version number component to bump (major|minor|patch)
        required: true

      release-from:
        description: Branch to create release from
        required: true
        default: release

      release-to:
        description: Branch to push release commit to
        required: true
        default: release

      dry-run:
        description: Whether or not to actually publish, push commits, etc (true|false)
        required: true
        default: "true"

      extra-flags:
        description: Extra flags to pass to expublish
        required: false

env:
  preferred-elixir: "1.13.1"
  preferred-otp: "24.2.0"
  MIX_ENV: test
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-input:
    name: Validate Input
    runs-on: ubuntu-latest

    steps:
      - name: Validate release action input
        if: ${{ !contains(fromJson('["major", "minor", "patch"]'), github.event.inputs.release-type) }}
        run: |
          echo "
          Provided release action input not valid; got "${{github.event.inputs.release-type}}",
          but needed one of (major|minor|patch).
          "; exit 1

      - name: Validate dry run input
        if: ${{ !contains(fromJson('["true", "false"]'), github.event.inputs.dry-run) }}
        run: |
          echo "
          Provided dry run input not valid; got "${{github.event.inputs.dry-run}}",
          but needed one of (true|false).
          "; exit 1

  dry-run-release:
    name: Perform Release Dry-Run
    runs-on: ubuntu-latest

    if: github.event.inputs.dry-run != "false"

    needs:
      - validate-input

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.events.input.release-from }}

      - name: Install Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.preferred-elixir }}
          otp-version: ${{ env.preferred-otp }}

      - name: Restore Mix Cache
        id: mix-cache
        uses: actions/cache@v1
        with:
          path: deps
          key: cache-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ env.preferred-otp }}-${{ env.preferred-elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Setup dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: mix deps.get

      - name: Show what release commit and hex publication would look like
        run: |
          mix release.${{github.event.inputs.release-type}} \
            --dry-run \
            --branch=${{github.event.inputs.release-to}} \
            --disable-test

      - name: "Show changed files"
        run: |
          git diff
          git diff HEAD~1

  validate-release:
    name: Perform Release
    runs-on: ubuntu-latest

    if: github.event.inputs.dry-run == "false"

    needs:
      - validate-input

  tests:
    name: Testing
    runs-on: ubuntu-latest

    needs:
      - validate-release

    continue-on-error: ${{ matrix.allow-failure }}
    strategy:
      matrix:
        elixir:
          - "1.10.x"
          - "1.11.x"
          - "1.12.x"
          - "1.13.x"
        otp:
          - "22.x"
          - "23.x"
          - "24.x"
        allow-failure: [false]
        include:
          # Technically unsupported version combinations we allow to fail
          - elixir: "1.10.x"
            otp: "23.x"
            allow-failure: true
          - elixir: "1.10.x"
            otp: "24.x"
            allow-failure: true

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.events.input.release-from }}

      - name: Install Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Restore Mix Cache
        id: mix-cache
        uses: actions/cache@v1
        with:
          path: deps
          key: cache-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Setup dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: mix install

      - name: Run test suite
        run: mix test

  lints:
    name: Linting
    runs-on: ubuntu-latest

    needs:
      - validate-release

    continue-on-error: ${{ matrix.allow-failure }}
    strategy:
      matrix:
        elixir:
          - "1.10.x"
          - "1.11.x"
          - "1.12.x"
          - "1.13.x"
        otp:
          - "22.x"
          - "23.x"
          - "24.x"
        allow-failure: [false]
        include:
          # Technically unsupported version combinations we allow to fail
          - elixir: "1.10.x"
            otp: "23.x"
            allow-failure: true
          - elixir: "1.10.x"
            otp: "24.x"
            allow-failure: true

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.events.input.release-from }}

      - name: Install Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Restore Mix Cache
        id: mix-cache
        uses: actions/cache@v1
        with:
          path: deps
          key: cache-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Setup dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: mix install

      - name: Run compilation linter
        run: mix lint.compile

  types:
    name: Typechecking
    runs-on: ubuntu-latest

    needs:
      - validate-release

    continue-on-error: ${{ matrix.allow-failure }}
    strategy:
      matrix:
        elixir:
          - "1.10.x"
          - "1.11.x"
          - "1.12.x"
          - "1.13.x"
        otp:
          - "22.x"
          - "23.x"
          - "24.x"
        allow-failure: [false]
        include:
          # Technically unsupported version combinations we allow to fail
          - elixir: "1.10.x"
            otp: "23.x"
            allow-failure: true
          - elixir: "1.10.x"
            otp: "24.x"
            allow-failure: true

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.events.input.release-from }}

      - name: Install Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Restore Mix Cache
        id: mix-cache
        uses: actions/cache@v1
        with:
          path: deps
          key: cache-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Setup dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: mix install

      - name: Retrieve PLT Cache
        id: plt-cache
        uses: actions/cache@v1
        with:
          path: /home/runner/.cache/dialyzer/plts
          key: cache-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Setup typechecking
        if: steps.plt-cache.outputs.cache-hit != 'true'
        run: mix typecheck.cache

      - name: Run typecheck tasks
        run: mix typecheck

  perform-release:
    name: Perform Release
    runs-on: ubuntu-latest

    needs:
      - tests
      - lints
      - types

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.events.input.release-from }}

      - name: Install Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ env.preferred-elixir }}
          otp-version: ${{ env.preferred-otp }}

      - name: Restore Mix Cache
        id: mix-cache
        uses: actions/cache@v1
        with:
          path: deps
          key: cache-${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ env.preferred-otp }}-${{ env.preferred-elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      - name: Setup dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: mix deps.get

      - name: Create release commit and publish to hex
        run: |
          mix release.${{github.event.inputs.release-type}} \
            --branch=${{github.event.inputs.release-to}} \
            --disable-test

      - name: Make release tag available as `steps.release-tag.outputs.name`
        id: release-tag
        run: echo "::set-output name=name::$( git tag --points-at HEAD | grep -e '^v\d' | head -n1 )"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-tag.outputs.name }}

      - name: Prepare next release's release notes
        run: |
          touch RELEASE.md
          git commit -am "Prepare for next release"
          git push
